from .. import utils, loader
from asyncio import sleep
import random
from datetime import timedelta
import os

shablon1 = ('Ôªø—Ç–≤–æ—é –º–∞–º–∞—à–∫—É –µ–±–∞–ª –Ω–∞ —Ç–∏—Ö–∏—Ö —Ö–æ–ª–º–∞—Ö –∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ—Ö–æ—Ä–æ–Ω–∏–ª –µ–µ –ø–æ–¥ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–º –∫—Ä–µ—Å—Ç–æ–º',
'—Å —Å–∞—Ç–∞–Ω–æ–π —Ö—É—è—Ä–∏–º –∫–∞–≥–æ—Ä –∏ –µ–±–µ–º —Ç–≤–æ—é –º–∞–º–∞—à–∫—É',
'–µ–±–ª–∏—â–µ —Ç–≤–æ–µ –ª–æ–º–æ–º –æ—Ç—Ö—É—è—Ä–∏–º —Ç–∞–∫ —á—Ç–æ —Ç—ã –∏–∑ —Å–µ–±—è –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –∫–∞–∫ –∫—É—Å–∫–∞ –º—è—Å–∞ –Ω–∏—á–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±—É–¥–µ—à—å',
'—Ç–≤–æ–µ–π –±–µ—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞–º–∞—à–µ –ø–æ –∫–æ–ª–µ–Ω—è–º —Ö—É–µ–º –µ–±–∞–Ω—É–ª –∏ –æ–Ω–∞ —à–∞–ª–∞–≤–∞ –µ–±—É—á–∞—è —Å—Ä–∞–∑—É —Å–æ—Å–∞—Ç—å –ø—Ä–∏–Ω—è–ª–∞—Å—å',
'–∫–æ–Ω—á–∏–ª –≤ —Ç–≤–æ—é –º–∞—Ç—å –∏–∑ –Ω–µ–µ –≤—ã—à–ª–∞ —Å–∞–ª–∞–º–∞–Ω–¥—Ä–∞',
'—è –Ω–∞–∫–æ–ª–æ–ª —Å–µ–±–µ –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º—É –∏ —Ç–≤–æ—é –≥–æ–ª–æ–≤—É –Ω–∞ –∫–æ–ª',
'—Ç–≤–æ—é –º–∞–º–∞—à–∫—É –µ–±–∞–ª–æ–º –∑–∞—Å—É–Ω—É–ª –≤ —Ä–µ—à–µ—Ç–∫–∏ –ø–æ–ª—ã—Ö–∞—é—â–µ–≥–æ —Ö—Ä–∞–º–∞',
'—Ä–∞—Å—Ö—É—è—Ä–∏–ª —Ç–≤–æ—é –º–∞–º–∞—à–∫—É –∞ —Ç—ã —Ç–∞–∫ –∏ –æ—Å—Ç–∞–ª—Å—è –ø–∏–¥–æ—Ä–∞—Å–æ–º',
'–æ—Ç–æ—Ä–≤—É –≥–æ–ª–æ–≤—É —Ç–≤–æ–µ–π –º–∞–º–∞—à–µ –∏ –Ω–∞—Å–∞–∂—É –Ω–∞ –∑–∞–±–æ—Ä ',
'—Å–±—Ä–æ—à—É —Ç–µ–±—è —Å –Ω–µ–±–æ—Å–∫—Ä–µ–±–∞ –Ω–∞ —à—Ç—ã–∫',
'—è —Ç–µ–±–µ –ø–∏–∑–¥–µ–Ω—å –ø–æ—Ä–≤—É —Å—ã–Ω —à–ª—é—Ö–∏',
'–Ω–æ—É –Ω–µ–π–º —è —Ç–≤–æ—é –º–∞—Ç—å –µ–±–∞–ª –∑–∞–∫—Ä–æ–π –Ω–∞—Ö—É–π —Å–≤–æ–µ –µ–±–ª–∏—â–µ',
'—è —Ç–µ–±–µ —Ä—ã–ª–∏—â–µ –ø–µ—Ä–µ–ª–æ–º–∞—é —Å—ã–Ω —à–ª—é—Ö–∏ —Ç—ã –µ–±—É—á–∏–π',
'—á–ª–µ–Ω –º–æ–π –±–µ—Ä–∏ –≤ —Ä—É–∫–∏ –∏ –¥–µ—Ä–µ–∂–∏—Ä—É–π –µ–±–∞—Ç—å',
'–µ–±–ª–∏—â–µ —Ç–µ–±–µ –ø–æ—Ä–≤—É —Å—ã–Ω —à–ª—é—Ö–∏ –µ–±—É—á–∏–π',
'–µ–±–∞–ª–æ —Ç–µ–±–µ —Å–ª–æ–º–∞—é —Å—ã–Ω —à–ª—é—Ö–∏ –∑–∞–∫—Ä–æ–π –µ–±–∞–ª–æ',
'—á–ª–µ–Ω–∏–∫—Å –±–µ—Ä–∏ –≤ —Ä—É–∫–∏ —Å—ã–Ω–æ–∫ —à–ª—é—Ö–∏',
'—è —Ç–µ–±—è –∑–∞ —É—à–∏ –Ω–∞ —Å–≤–æ–π —Ö—É–π –Ω–∞—Ç—è–Ω—É —à–ª—é—Ö–∞ –ø–æ–∑–æ—Ä–Ω–∞—è',
'–≤—ã—Ä–≤–µ–º —Ç–µ–±–µ —É—à–∏ —Å—ã–Ω —à–ª—é—Ö–∏ –µ–±–∞–Ω—ã–π',
'—è —Ç–≤–æ—é —à–ª—é—Ö–æ–º–∞—Ç–µ—Ä—å –µ–±–∞–ª –∑–∞–∫—Ä–æ–π –µ–±–ª–∏—â–µ —Å–≤–æ–µ –Ω–∞—Ö—É–π',
'—Ä—ã–ª–∏—â–µ —Ç–µ–±–µ –ø–µ—Ä–µ–ª–æ–º–∞–µ–º —Å—ã–Ω–æ–∫ –æ—Å–ª–∞ –µ–±–∞–Ω—ã–π',
)
shablon2 = " –æ—Ç—Å–æ—Å–∏"
shablon3 = 'che sosi'
shablon4 = " —É—Å–æ—Å–∏"
shablon5 = "—É—É"
shablon6 = " —Å—Å"
shablon7 = " –≤–≤–≤"
shablon8 = " —á–ª–µ–Ω –±–µ—Ä–µ—à—å"
shablon_all = [shablon1, shablon2, shablon3, shablon4, shablon5, shablon6, shablon7, shablon8]


wabl1 = ('—Ö—É–π —Å–æ—Å–µ—à—å',
'–Ω–∞—è—Ä–∏–≤–∞–π —á–ª–µ–Ω—è—Ä—É –¥–µ–≥–∞–Ω',
'—Ö—É–µ–º —Ç–µ–±–µ –∂–æ–ø—É —Ä–≤–∞–ª',
'–µ–±–∞–ª–æ –∑–∞–∫—Ä–æ–π —Å–≤–æ–µ',
'—Å—ã–Ω—É–ª—è —à–ª—é—à–∫–∏ —Ç—ã',
'–∫–æ–ª–µ–Ω–Ω—ã–µ —á–∞—à–µ—á–∫–∏ —Ç–µ –≤—ã–ª–æ–º–∞—é',
'—Ö—É–µ–º —Ä–∞–∑–¥—Ä–æ–±–ª—é —Ç–µ –µ–±–∞–ª—å–Ω–∏–∫',
'—á–ª–µ–Ω–æ–º —Ç—è –ª–∞–≤–ª—é',
'—Ö—É–µ–º —Ç—è –ø–∏–∑–¥–∏–ª',
'–µ–±–∞–ª–æ –≤—Ç—É–ª–∏',
'—Å—ã–Ω–∏—à–∫–∞ —à–º–∞—Ä—ã —Ç—ã',
'–Ω–∞—è—Ä–∏–≤–∞–π –∑–∞–ª—É–ø—É',
'–Ω–∞ –∫–æ—Å—Ç—Ä–µ —Ç—è —Ä–µ–∂—É',
'—Ö—É–µ–º —Ç—è —Ä–∞–∑–¥–∞–≤–∏–ª',
'–ø–æ—Ä–≤–∞–ª —Ç–µ –µ–±–∞–ª—å–Ω–∏–∫ –ø–æ—Ä–æ—Å–µ–Ω–∫—É',
'—Å–æ—Å–µ—à—å —Ç—ã',
'–ø–∏–∑–¥–µ—Ü —Å–æ—Å–∏',
'—Ö—É–µ–º —Ç—è —É–Ω–∏–∂–∞–ª',
'—Ñ–∞—Ä—à–º–∞–∫ —Ç—ã –µ–±–∞–Ω—ã–π',
'—Ö—É–µ–º —Ç–≤–æ—é –º–∞—Ç—å —Ç—É—à–∏–ª',
'–µ–±–∞–ª–æ —Ç–µ –±–∏–ª',
'—Ö—É–µ–º —Ç—è –ø–∏–∑–¥–∏–ª',
'—Ö—É–π —Å–æ—Å–µ—à—å —Ç—ã',
'—á–ª–µ–Ω —Ö–≤–∞—Ç–∞–π',
'—Ä–µ—â–µ —Ö—É–∏–Ω—É –±–µ—Ä–∏',
'–ø–∏–∑–¥–∏–ª–∏ —Ç—è',
'–µ–±–∞–ª–æ –∑–∞–∫—Ä–æ–π',
'—Å–ª–∞–±–∞–∫ —Ç—ã',
'—Å–æ–ø–ª–µ–∂—É–π —Ç—ã',
'—Ö—É–π —Ö–≤–∞—Ç–∞–π —Ç—ã',
'—Å–æ—Å–µ—à—å –º–Ω–µ',
'—Å–æ—Å–µ—à—å –∫–ª–∞–Ω—É –º–æ–µ–º—É',
'—á–ª–µ–Ω —Å–∞–∫–∞–π',
'—Ö—É–π –±–µ—Ä–∏',
'—Å–º–æ–∫—á–∏ —á–ª–µ–Ω—è—Ä—É',
'—Ö—É–µ–º —Ç—è —Ç—É—à–∏–ª',
'–µ–±–∞—à—É —Ç—è –∑–∞–ª—É–ø–æ–π',
'—Ö—É–π –≤–æ–∑—å–º–∏ —É–∂–µ',
'–Ω–∞ —á–ª–µ–Ω',
'—Ç—Ä–∞—Ö–Ω–µ–º —Ç–≤–æ—é —Å–µ–º—å—é',
'—Ä–µ–∂—É —Ç–µ –º–∞—Ç—É—Ö—É',
'—Ç–µ—Ä–ø–∏–ª–∞ —Ç—ã',
'—Ö—É–π –±–µ—Ä–µ—à—å',
'—á–ª–µ–Ω —Å–æ—Å–µ—à—å',
'–µ–±–∞–ª–æ —Ç–µ —Ä–≤—É',
'—Ä–µ–∂—É —Ç–µ —Ç–µ–ª–æ',
'—Å–ª–∞–±–∞–∫ —Ç—ã',
'—Ö–µ-—Ö–µ —Å–æ—Å–∏',
'–µ–±–∞—Ç—å —Ç—ã –æ—Ç—Å–æ—Å–Ω–∏–∫',
'—Ö—É–π –≤–æ–∑—å–º–∏ –∏ —Å–æ—Å–∏',
'–≥–ª–æ—Ç–∞–π —Ö—É–π —Ç—ã',
'—á–ª–µ–Ω–æ–º —Ç—è –±—å—é',
'—Ö—É–µ–º —Ç—è —É–±–∏–ª',
'—è —Å—Ç–µ–±–∞–ª —Ç–≤–æ—é –º–∞—Ç—É—Ö—É',
)
wabl2 = " –æ—Ç—Å–æ—Å–∏"
wabl3 = 'che sosi'
wabl4 = " —É—Å–æ—Å–∏"
wabl5 = "—É—É"
wabl6 = " —Å—Å"
wabl7 = " –≤–≤–≤"
wabl8 = " —á–ª–µ–Ω –±–µ—Ä–µ—à—å"
wabl_all = [wabl1, wabl2, wabl3, wabl4, wabl5, wabl6, wabl7, wabl8]


wablon1 = ('—Ö—É–π',
'—Å–æ—Å–∏',
'–Ω–∞',
'—á–ª–µ–Ω',
'–±–µ—Ä–∏',
'–º–æ—é',
'—Ö—É–∏–Ω—É',
'–∏',
'—Å–æ—Å–∏',
'–Ω–∞',
'—á–ª–µ–Ω—è—Ä—É',
'–±–µ—Ä–∏',
'–º–æ–π',
'—Ö—É–π',
'—á–ª–µ–Ω',
'—Ö–≤–∞—Ç–∞–π',
'—Ä–µ–∂—É',
'—Ç—è',
'—Å–æ—Å–µ—à—å',
'—Ç—ã',
'–µ–±—É',
'—Ç—è',
'–Ωy',
'—É–∂–µ',
'—Å–æ—Å–∏',
'—Ç–µ—Ä–ø–∏–ª—å–Ω—ã–π',
'—Ç–µ—Ä–ø–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
'—Ö—É–µ–º',
'—Ç—è',
'–ø–æ—Ç—ã–∫–∞—é',
'–Ω—É',
'–∂–µ',
'—Ö—É–π',
'—Å–æ—Å–∏',
'—Ä–µ—â–µ',
'–º–Ω–µ',
'—Å–æ—Å–∏',
'–æ—Ç—Å–∞—Å—ã–≤–∞–π',
'—Ç–µ—Ä–ø–∏–ª–∞',
'—Ç—ã',
'—Ö—É–µ—Å–æ—Å',
'—Ç—ã',
'—Å–ª–∞–±–∞–∫',
'—Ç—ã',
'–µ–±–∞–Ω—ã–π',
'–Ω—É',
'–∂–µ',
'—á–ª–µ–Ω',
'–±–µ—Ä–∏',
'–∏',
'—Å–º–æ–∫—á–∏',
'–∏–¥–∏–æ—Ç',
'–µ–±–∞–Ω—ã–π',
'–Ω—É',
'–∂–µ',
'–µ–±—É',
'—Ç—è',
'—Ö—É–µ—Å–æ—Å',
'—Å–ª–∞–±–∞–∫',
'–ø–∏–¥–æ—Ä',
'–¥–∞–ª–±–∞–µ–±',
'–Ω–µ–º–æ—â',
'—É–ª–∏—Ç–∫–∞',
'—Ä–µ—â–µ',
'—Å–æ—Å–∏',
'–º–æ–π',
'—Ö—É–π',
'–¥–∞–≤–∞–π',
'—Ç–∞–º',
)
wablon2 = " –æ—Ç—Å–æ—Å–∏"
wablon3 = 'che sosi'
wablon4 = " —É—Å–æ—Å–∏"
wablon5 = "—É—É"
wablon6 = " —Å—Å"
wablon7 = " –≤–≤–≤"
wablon8 = " —á–ª–µ–Ω –±–µ—Ä–µ—à—å"
wablon_all = [wablon1, wablon2, wablon3, wablon4, wablon5, wablon6, wablon7, wablon8]


class Revmatolog(loader.Module):
    """‚Ä†Life Changer‚õß"""
    strings = {'name': 'Private by Revmatolog'}
    async def client_ready(self, client, db):
        self.db = db
        self.client = client

    async def revmacmd(self, message):
        """For revma spamüå¥ - .revma + –∑–∞–¥–µ—Ä–∂–∫–∞ + –∞–π–¥–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ + —à–∞–ø–∫–∞ ‚õß"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        file = reply if reply and reply.file else None
        if not args:
            return await utils.answer(message, '<b>‚õß–¢—ã –≤–≤—ë–ª –∫–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚õß</b>')
        args = args.split(' ', maxsplit=2)
        try:
            time = float(args[0])
        except:
            return await utils.answer(message, '<b>‚õß–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>‚õß')
        if args[1].isdigit():
            args[1] = int(args[1])
        try:
            args[2] = args[2]
        except:
            args.append('')
        status = self.db.set("revma", "status", True)
        await message.delete()
        while status:
            try:
                await message.client.send_message(args[1], args[2] + " " + random.choice(
                    shablon_all[self.db.get('revma', 'shablon', 1) - 1]), file=file)
                await sleep(time)
            except Exception as e:
                return await message.respond(f"–û—à–∏–±–∫–∞:\n" + str(e))
            if not self.db.get("revma", "status"): return


    async def stopcmd(self, message):
        """For stop bot - .stop –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞‚õß """
        self.db.set('revma', 'status', False)
        await utils.answer(message, '<b>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ‚õß</b>')

    async def idcmd(self, message):
        """For id konferentionüå¥ - .id –∞–π–¥–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ‚õß"""
        reply = await message.get_reply_message()
        me = await message.client.get_me()
        if not reply:
            i = str(message.chat_id)
        else:
            i = str(reply.sender_id)
        if i.startswith('-100'):
            i = i[4:]
        await message.client.send_message(message.chat.id, f'<b>üåìCHAT ID:</b> <code>{message.chat.id}</code>')
        await message.delete()


    async def phcmd(self, message):
        """For photobotüå¥ - –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–ø–ª–∞–π –Ω–∞ —Ñ–æ—Ç–æ –∏ .ph‚õß"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        file = reply if reply and reply.file else None
        if not args:
            return await utils.answer(message, '<b>‚õß–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞‚õß</b>')
        args = args.split(' ', maxsplit=2)
        try:
            time = float(args[0])
        except:
            return await utils.answer(message, '<b>‚õß–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏‚õß</b>')
        if args[1].isdigit():
            args[1] = int(args[1])
        try:
            args[2] = args[2]
        except:
            args.append('')
        status = self.db.set("revma", "status", True)
        await message.delete()
        while status:
            try:
                for i in shablon_all[self.db.get('revma', 'shablon', 1) - 1]:
                    await message.client.send_message(args[1], args[2] + " " + i, file=file)
                    await sleep(time)
                    if not self.db.get("revma", "status"): return
            except Exception as e:
                return await message.respond(f"‚õß–û—à–∏–±–∫–∞:\n {str(e)}")
            
            
    async def SatanWablons(self, client, db) -> None:
        self.db = db
        self.client = client

    async def wabloncmd(self, message):
        """For save wablonüå¥ - command .wablon + replay‚õß"""
        name = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if reply:
            await message.edit('‚õßDownloading...‚õß')
            if reply.text:
                text = reply.text
                fname = f'{name or message.id + reply.id}.txt'
                file = open(fname, 'w')
                file.write(text)
                file.close()
                await message.edit(
                    f'‚õßWablon saved how: <code>{fname}</code> ‚õß')
            else:
                ext = reply.file.ext
                fname = f'{name or message.id + reply.id}{ext}'
                await message.client.download_media(reply, fname)
                await message.edit(
                    f'‚õßWablon saved how: <code>{fname} ‚õß')
        else:
            return await message.edit('‚õßReplay the file‚õß')

    async def satanrvcmd(self, message):
        """For satanrv spamüå¥ - time + wablon.txt + obrawenie‚õß"""
        shapka = utils.get_args_raw(message)
        if not shapka:
            self.db.set(self.strings["name"], "state", False)
            await utils.answer(message, "<b>‚õßSatanSpam is stopped‚õß</b>")
            return
        await utils.answer(
            message,
            "<b>‚õßSatanSpam by Revma started his work\n\n"
            "‚õßfor stopping bot write .SatanSpam <code>.satanrv</code></b> ‚õß",
        )
        text = shapka.split(' ')
        time = int(text[0])
        sh = ''.join(text[1])
        shp = ' '.join(text[2:])
        self.db.set(self.strings["name"], "state", True)
        with open(f'{sh}', 'r', encoding='utf-8') as f:
            s = f.read()
            w = s.split('\n')
            while self.db.get(self.strings["name"], "state"):
                await message.respond((shp + random.choice(w)))
                await sleep(time)


    async def nonstopcmd(self, message):
        """For nonstopüå¥ - .nonstop + –∑–∞–¥–µ—Ä–∂–∫–∞ + –∞–π–¥–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ + —à–∞–ø–∫–∞ ‚õß"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        file = reply if reply and reply.file else None
        if not args:
            return await utils.answer(message, '<b>‚õß–¢—ã –≤–≤—ë–ª –∫–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚õß</b>')
        args = args.split(' ', maxsplit=2)
        try:
            time = float(args[0])
        except:
            return await utils.answer(message, '<b>‚õß–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>‚õß')
        if args[1].isdigit():
            args[1] = int(args[1])
        try:
            args[2] = args[2]
        except:
            args.append('')
        status = self.db.set("revma", "status", True)
        await message.delete()
        while status:
            try:
                await message.client.send_message(args[1], args[2] + " " + random.choice(
                    wabl_all[self.db.get('revma', 'wabl', 1) - 1]), file=file)
                await sleep(time)
            except Exception as e:
                return await message.respond(f"–û—à–∏–±–∫–∞:\n" + str(e))
            if not self.db.get("revma", "status"): return


    async def lesenkacmd(self, message):
        """For lesenkaüå¥ - .lesenka + –∑–∞–¥–µ—Ä–∂–∫–∞ + –∞–π–¥–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ + —à–∞–ø–∫–∞ ‚õß"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        file = reply if reply and reply.file else None
        if not args:
            return await utils.answer(message, '<b>‚õß–¢—ã –≤–≤—ë–ª –∫–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚õß</b>')
        args = args.split(' ', maxsplit=2)
        try:
            time = float(args[0])
        except:
            return await utils.answer(message, '<b>‚õß–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>‚õß')
        if args[1].isdigit():
            args[1] = int(args[1])
        try:
            args[2] = args[2]
        except:
            args.append('')
        status = self.db.set("revma", "status", True)
        await message.delete()
        while status:
            try:
                await message.client.send_message(args[1], args[2] + " " + random.choice(
                    wablon_all[self.db.get('revma', 'wablon1', 1) - 1]), file=file)
                await sleep(time)
            except Exception as e:
                return await message.respond(f"–û—à–∏–±–∫–∞:\n" + str(e))
            if not self.db.get("revma", "status"): return
